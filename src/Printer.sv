/* -*- sv -*- File generated by the BNF Converter (bnfc 2.9.6). */

/*** Generated Pretty Printer and Abstract Syntax Viewer ***/

`include "Printer.svh"
`define INDENT_WIDTH 2


//You may wish to change render
task PrintAbsyn::render(string c);

  if (c == "{")
  begin
     bufAppend("\n");
     indent();
     bufAppend(c);
     _n_ = _n_ + `INDENT_WIDTH;
     bufAppend("\n");
     indent();
  end
  else if (c == "(" || c == "[")
     bufAppend(c);
  else if (c == ")" || c == "]")
  begin
     backup();
     bufAppend(c);
  end
  else if (c == "}")
  begin
     int t;
     _n_ = _n_ - `INDENT_WIDTH;
     for (t=0; t<`INDENT_WIDTH; t++) begin
       backup();
     end
     bufAppend(c);
     bufAppend("\n");
     indent();
  end
  else if (c == ",")
  begin
     backup();
     bufAppend(c);
     bufAppend(" ");
  end
  else if (c == ";")
  begin
     backup();
     bufAppend(c);
     bufAppend("\n");
     indent();
  end
  else if (c == " ") bufAppend(c);
  else if (c == 0) return;
  else
  begin
     bufAppend(" ");
     bufAppend(c);
     bufAppend(" ");
  end
endtask

task PrintAbsyn::render_s(string s);

  if(s.len() > 0)
  begin
    bufAppend(s);
    bufAppend(" ");
  end
endtask

task PrintAbsyn::indent();

  int n = _n_;
  while (n > 0)
  begin
    bufAppend(" ");
    n--;
  end
endtask

task PrintAbsyn::backup();
/*
  if (buf_[cur_ - 1] == " ")
  begin
    buf_[cur_ - 1] = 0;
    cur_--;
  end
*/
endtask

function PrintAbsyn::new();

  _i_ = 0; _n_ = 0;
  buf_ = "";
endfunction

task PrintAbsyn::print(Visitable v);

  _i_ = 0; _n_ = 0;
  buf_="";
  v.accept(this);
endtask

task PrintAbsyn::visitJSON(JSON p); endtask //abstract class

task PrintAbsyn::visitJSONValue(JSONValue  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.value_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitValue(Value p); endtask //abstract class

task PrintAbsyn::visitObjectVal(ObjectVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("{");

  _i_ = 0; visitListMember_Item(p.listmember_item_);
  render("}");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitArrayVal(ArrayVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("[");

  _i_ = 0; visitListValue(p.listvalue_);
  render("]");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitStringVal(StringVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.string_literal_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitScientificNumberVal(ScientificNumberVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitScientificNum(p.scientificnum_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitDecimalNumberVal(DecimalNumberVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitDecimalNum(p.decimalnum_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitIntegerNumberVal(IntegerNumberVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIntegerNum(p.integernum_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitTrueVal(TrueVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("true");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFalseVal(FalseVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("false");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitNullVal(NullVal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("null");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitListMember_Item(ListMember_Item listmember_item);

  iterListMember_Item(listmember_item, 0, listmember_item.v.size());
endtask

task PrintAbsyn::iterListMember_Item(ListMember_Item l, int i, int j);

  if (i == j) return;
  if (i == j-1)
  begin /* last */
    l.v[i].accept(this);
  end
  else
  begin /* cons */
    l.v[i].accept(this); render(","); iterListMember_Item(l, i+1, j);
  end
endtask

task PrintAbsyn::visitMember_Item(Member_Item p); endtask //abstract class

task PrintAbsyn::visitMember(Member  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.string_literal_.accept(this);
  render(":");

  _i_ = 0; p.value_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitListValue(ListValue listvalue);

  iterListValue(listvalue, 0, listvalue.v.size());
endtask

task PrintAbsyn::iterListValue(ListValue l, int i, int j);

  if (i == j) return;
  if (i == j-1)
  begin /* last */
    l.v[i].accept(this);
  end
  else
  begin /* cons */
    l.v[i].accept(this); render(","); iterListValue(l, i+1, j);
  end
endtask

task PrintAbsyn::visitString_Literal(String_Literal p); endtask //abstract class

task PrintAbsyn::visitStringLit(StringLit  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitAnyChars(p.anychars_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitInteger(Integer x);

  string tmp = $psprintf("%d", x);
  bufAppend(tmp);
endtask

task PrintAbsyn::visitDouble(Double x);

  string tmp = $psprintf("%g", x);
  bufAppend(tmp);
endtask

task PrintAbsyn::visitChar(Char x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task PrintAbsyn::visitString(string x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task PrintAbsyn::visitIdent(string x);

  render(x);
endtask

task PrintAbsyn::visitIntegerNum(IntegerNum x);

  render(x);
endtask


task PrintAbsyn::visitDecimalNum(DecimalNum x);

  render(x);
endtask


task PrintAbsyn::visitScientificNum(ScientificNum x);

  render(x);
endtask


task PrintAbsyn::visitAnyChars(AnyChars x);

  render(x);
endtask


function ShowAbsyn::new();
  buf_ = "";
endfunction


task ShowAbsyn::show(Visitable v);

  buf_="";
  v.accept(this);
endtask

task ShowAbsyn::visitJSON(JSON p); endtask //abstract class

task ShowAbsyn::visitJSONValue(JSONValue  p);

  bufAppend("(");
  bufAppend("JSONValue");
  bufAppend("\"");
  bufAppend("[");

  if (p.value_)  p.value_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitValue(Value p); endtask //abstract class

task ShowAbsyn::visitObjectVal(ObjectVal  p);

  bufAppend("(");
  bufAppend("ObjectVal");
  bufAppend("\"");
  bufAppend("[");

  if (p.listmember_item_)  p.listmember_item_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitArrayVal(ArrayVal  p);

  bufAppend("(");
  bufAppend("ArrayVal");
  bufAppend("\"");
  bufAppend("[");

  if (p.listvalue_)  p.listvalue_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitStringVal(StringVal  p);

  bufAppend("(");
  bufAppend("StringVal");
  bufAppend("\"");
  bufAppend("[");

  if (p.string_literal_)  p.string_literal_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitScientificNumberVal(ScientificNumberVal  p);

  bufAppend("(");
  bufAppend("ScientificNumberVal");
  bufAppend("\"");
  visitScientificNum(p.scientificnum_);

  bufAppend(")");
endtask
task ShowAbsyn::visitDecimalNumberVal(DecimalNumberVal  p);

  bufAppend("(");
  bufAppend("DecimalNumberVal");
  bufAppend("\"");
  visitDecimalNum(p.decimalnum_);

  bufAppend(")");
endtask
task ShowAbsyn::visitIntegerNumberVal(IntegerNumberVal  p);

  bufAppend("(");
  bufAppend("IntegerNumberVal");
  bufAppend("\"");
  visitIntegerNum(p.integernum_);

  bufAppend(")");
endtask
task ShowAbsyn::visitTrueVal(TrueVal  p);

  bufAppend("TrueVal");
endtask
task ShowAbsyn::visitFalseVal(FalseVal  p);

  bufAppend("FalseVal");
endtask
task ShowAbsyn::visitNullVal(NullVal  p);

  bufAppend("NullVal");
endtask
task ShowAbsyn::visitListMember_Item(ListMember_Item listmember_item);

  for ( int i = 0; i < listmember_item.v.size() ; i++)
  begin
    listmember_item.v[i].accept(this);
    if (i != listmember_item.v.size() - 1) bufAppend(", ");
  end
endtask
task ShowAbsyn::visitMember_Item(Member_Item p); endtask //abstract class

task ShowAbsyn::visitMember(Member  p);

  bufAppend("(");
  bufAppend("Member");
  bufAppend("\"");
  bufAppend("[");

  if (p.string_literal_)  p.string_literal_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.value_)  p.value_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitListValue(ListValue listvalue);

  for ( int i = 0; i < listvalue.v.size() ; i++)
  begin
    listvalue.v[i].accept(this);
    if (i != listvalue.v.size() - 1) bufAppend(", ");
  end
endtask
task ShowAbsyn::visitString_Literal(String_Literal p); endtask //abstract class

task ShowAbsyn::visitStringLit(StringLit  p);

  bufAppend("(");
  bufAppend("StringLit");
  bufAppend("\"");
  visitAnyChars(p.anychars_);

  bufAppend(")");
endtask
task ShowAbsyn::visitInteger(Integer x);

  string tmp = $psprintf("%d", x);
  bufAppend(tmp);
endtask

task ShowAbsyn::visitDouble(Double x);
  string tmp = $psprintf("%g", x);
  bufAppend(tmp);
endtask

task ShowAbsyn::visitChar(Char x);
  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task ShowAbsyn::visitString(string x);
  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task ShowAbsyn::visitIdent(string x);
  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task ShowAbsyn::visitIntegerNum(IntegerNum x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask


task ShowAbsyn::visitDecimalNum(DecimalNum x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask


task ShowAbsyn::visitScientificNum(ScientificNum x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask


task ShowAbsyn::visitAnyChars(AnyChars x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask



