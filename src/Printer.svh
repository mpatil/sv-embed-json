/* -*- sv -*- File generated by the BNF Converter (bnfc 2.9.6). */

`ifndef PRINTER_HEADER
`define PRINTER_HEADER

`include "Absyn.svh"

/* Certain applications may improve performance by changing the buffer size */
`define BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
`define _L_PAREN "("
`define _R_PAREN ")"

class PrintAbsyn implements Visitor;

  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  extern task render(string c);
  extern task render_s(string s);
  extern task indent();
  extern task backup();

  extern function new ();

  extern task print(Visitable v);

  extern virtual task visitJSON(JSON p); /* abstract class */
  extern virtual task visitJSONValue(JSONValue p);
  extern virtual task visitValue(Value p); /* abstract class */
  extern virtual task visitObjectVal(ObjectVal p);
  extern virtual task visitArrayVal(ArrayVal p);
  extern virtual task visitStringVal(StringVal p);
  extern virtual task visitScientificNumberVal(ScientificNumberVal p);
  extern virtual task visitDecimalNumberVal(DecimalNumberVal p);
  extern virtual task visitIntegerNumberVal(IntegerNumberVal p);
  extern virtual task visitTrueVal(TrueVal p);
  extern virtual task visitFalseVal(FalseVal p);
  extern virtual task visitNullVal(NullVal p);
  extern virtual task visitListMember_Item(ListMember_Item listmember_item);

  extern virtual task iterListMember_Item(ListMember_Item l,int i, int j);
  extern virtual task visitMember_Item(Member_Item p); /* abstract class */
  extern virtual task visitMember(Member p);
  extern virtual task visitListValue(ListValue listvalue);

  extern virtual task iterListValue(ListValue l,int i, int j);
  extern virtual task visitString_Literal(String_Literal p); /* abstract class */
  extern virtual task visitStringLit(StringLit p);

  extern virtual task visitInteger(Integer x);
  extern virtual task visitDouble(Double x);
  extern virtual task visitChar(Char x);
  extern virtual task visitString(string x);
  extern virtual task visitIdent(string x);
  extern virtual task visitIntegerNum(IntegerNum x);
  extern virtual task visitDecimalNum(DecimalNum x);
  extern virtual task visitScientificNum(ScientificNum x);
  extern virtual task visitAnyChars(AnyChars x);

  string buf_;

  task bufAppend(string s);

    buf_ = {buf_, s};
  endtask

  task bufReset();

    buf_ = "";
  endtask

endclass


class ShowAbsyn implements Visitor;

  extern function new();
  extern task show(Visitable v);

  extern virtual task visitJSON(JSON p); /* abstract class */
  extern virtual task visitJSONValue(JSONValue p);
  extern virtual task visitValue(Value p); /* abstract class */
  extern virtual task visitObjectVal(ObjectVal p);
  extern virtual task visitArrayVal(ArrayVal p);
  extern virtual task visitStringVal(StringVal p);
  extern virtual task visitScientificNumberVal(ScientificNumberVal p);
  extern virtual task visitDecimalNumberVal(DecimalNumberVal p);
  extern virtual task visitIntegerNumberVal(IntegerNumberVal p);
  extern virtual task visitTrueVal(TrueVal p);
  extern virtual task visitFalseVal(FalseVal p);
  extern virtual task visitNullVal(NullVal p);
  extern virtual task visitListMember_Item(ListMember_Item listmember_item);

  extern virtual task visitMember_Item(Member_Item p); /* abstract class */
  extern virtual task visitMember(Member p);
  extern virtual task visitListValue(ListValue listvalue);

  extern virtual task visitString_Literal(String_Literal p); /* abstract class */
  extern virtual task visitStringLit(StringLit p);

  extern virtual task visitInteger(Integer x);
  extern virtual task visitDouble(Double x);
  extern virtual task visitChar(Char x);
  extern virtual task visitString(string x);
  extern virtual task visitIdent(string x);
  extern virtual task visitIntegerNum(IntegerNum x);
  extern virtual task visitDecimalNum(DecimalNum x);
  extern virtual task visitScientificNum(ScientificNum x);
  extern virtual task visitAnyChars(AnyChars x);

  string buf_;

  task bufAppend(string s);

    buf_ = {buf_, s};
  endtask

  task bufReset();

    buf_ = "";
  endtask

endclass


`endif

