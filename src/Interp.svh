/* -*- sv -*- File generated by the BNF Converter (bnfc 2.9.6). */

`ifndef INTERP_HEADER
`define INTERP_HEADER
`include "Absyn.svh"

class Interp implements Visitor;
  local Val_ jval[$];
  local string currTermTok;

  task push(Val_ val_); jval.push_back(val_); endtask
  function Val_ pop(); return jval.pop_back(); endfunction

  extern virtual task visitJSON(JSON p);
  extern virtual task visitValue(Value p);
  extern virtual task visitMember_Item(Member_Item p);
  extern virtual task visitString_Literal(String_Literal p);
  extern virtual task visitJSONValue(JSONValue p);
  extern virtual task visitObjectVal(ObjectVal p);
  extern virtual task visitArrayVal(ArrayVal p);
  extern virtual task visitStringVal(StringVal p);
  extern virtual task visitIntegerNumberVal(IntegerNumberVal p);
  extern virtual task visitDecimalNumberVal(DecimalNumberVal p);
  extern virtual task visitScientificNumberVal(ScientificNumberVal p);
  extern virtual task visitTrueVal(TrueVal p);
  extern virtual task visitFalseVal(FalseVal p);
  extern virtual task visitNullVal(NullVal p);
  extern virtual task visitMember(Member p);
  extern virtual task visitStringLit(StringLit p);

  extern virtual task visitListMember_Item(ListMember_Item listmember_item);
  extern virtual task visitListValue(ListValue listvalue);

  extern virtual task visitIntegerNum(IntegerNum x);
  extern virtual task visitDecimalNum(DecimalNum x);
  extern virtual task visitScientificNum(ScientificNum x);
  extern virtual task visitAnyChars(AnyChars x);
  extern virtual task visitInteger(Integer x);
  extern virtual task visitChar(Char x);
  extern virtual task visitDouble(Double x);
  extern virtual task visitString(String x);
  extern virtual task visitIdent(Ident x);

  task interpret(Visitable v);
    v.accept(this);
  endtask

  function Val_ get_json_val();
    return jval[$];
  endfunction

endclass

`endif
